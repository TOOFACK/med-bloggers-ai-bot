from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.utils import truncate_for_button


class PromptChoiceCallback(CallbackData, prefix="prompt"):
    message_id: int
    index: int


class PromptRegenCallback(CallbackData, prefix="regen"):
    message_id: int
    mode: str

class PromptModeCallback(CallbackData, prefix="mode"):
    mode: str  # "edit" | "new"

def prompt_mode_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üß† –î–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã —Ñ–æ—Ç–æ", callback_data=PromptModeCallback(mode="edit").pack())
    builder.button(text="üåÑ –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω—É–ª—è", callback_data=PromptModeCallback(mode="new").pack())
    builder.adjust(1)
    return builder.as_markup()

def prompt_suggestions_keyboard(message_id: int, prompts: list[str], mode: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for idx, prompt in enumerate(prompts):
        builder.button(
            text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç {idx+1}",
            callback_data=PromptChoiceCallback(message_id=message_id, index=idx).pack(),
        )
    builder.button(
        text="üîÑ –ï—â—ë –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ",
        callback_data=PromptRegenCallback(message_id=message_id, mode=mode).pack(),
    )
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    other_mode = "new" if mode == "edit" else "edit"
    builder.button(
        text="üß† –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∏–ª–µ",
        callback_data=PromptRegenCallback(message_id=message_id, mode=other_mode).pack(),
    )
    builder.adjust(1)
    return builder.as_markup()